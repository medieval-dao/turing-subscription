{
  "address": "0xD9130aE897D1350CC11817cFBcBc3D36c1D842ED",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract BobaTuringCredit",
          "name": "_turingCredit",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "CreditAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callder",
          "type": "address"
        }
      ],
      "name": "PermitedCallerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callder",
          "type": "address"
        }
      ],
      "name": "PermitedCallerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "activeSubscriptionByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_addBalanceAmount",
          "type": "uint256"
        }
      ],
      "name": "addBalanceToSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callerAddress",
          "type": "address"
        }
      ],
      "name": "addPermittedCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "addSubscriptionOnwer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "cancelSubscriptionId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callerAddress",
          "type": "address"
        }
      ],
      "name": "checkPermittedCaller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getSubscriptionCreditAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getSubscriptionTuringHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numSubscriptionCreated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ownedSubscriptionByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ownedSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callerAddress",
          "type": "address"
        }
      ],
      "name": "removePermittedCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "removeSubscriptionOnwer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "subscriptionOwnerByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "subscriptionOwnerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "subscriptionPermittedCallerByIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "subscriptionPermittedCallerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turingCredit",
      "outputs": [
        {
          "internalType": "contract BobaTuringCredit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeaea16abbe00e0ff8aad81bb85f46f8a7c4baccccfdb40b8a55d7979e9d2bee8",
  "receipt": {
    "to": null,
    "from": "0xd1459F0006a366F085B7ce89ADD021Cf53d463e6",
    "contractAddress": "0xD9130aE897D1350CC11817cFBcBc3D36c1D842ED",
    "transactionIndex": 0,
    "gasUsed": "2192526",
    "logsBloom": "0x
    "blockHash": "0x7228fdbc87adaf97dc3f71f397187db72981caa051d342e15eaa5ae821b035b9",
    "transactionHash": "0xeaea16abbe00e0ff8aad81bb85f46f8a7c4baccccfdb40b8a55d7979e9d2bee8",
    "logs": [],
    "blockNumber": 85135,
    "cumulativeGasUsed": "2192526",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x208c3CE906cd85362bd29467819d3AcbE5FC1614"
  ],
  "numDeployments": 4,
  "solcInputHash": "781d8defe7fed5eb9a204d2acb20fdbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract BobaTuringCredit\",\"name\":\"_turingCredit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"CreditAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callder\",\"type\":\"address\"}],\"name\":\"PermitedCallerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callder\",\"type\":\"address\"}],\"name\":\"PermitedCallerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"activeSubscriptionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addBalanceAmount\",\"type\":\"uint256\"}],\"name\":\"addBalanceToSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerAddress\",\"type\":\"address\"}],\"name\":\"addPermittedCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addSubscriptionOnwer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"cancelSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerAddress\",\"type\":\"address\"}],\"name\":\"checkPermittedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getSubscriptionCreditAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getSubscriptionTuringHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numSubscriptionCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ownedSubscriptionByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownedSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callerAddress\",\"type\":\"address\"}],\"name\":\"removePermittedCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeSubscriptionOnwer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"subscriptionOwnerByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"subscriptionOwnerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"subscriptionPermittedCallerByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"}],\"name\":\"subscriptionPermittedCallerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turingCredit\",\"outputs\":[{\"internalType\":\"contract BobaTuringCredit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TuringSubscriptionManager.sol\":\"TuringSubscriptionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/BobaTuringCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n/* Interface */\\nimport \\\"./ITuringHelper.sol\\\";\\n\\n/**\\n * @title BobaTuringCredit\\n * @dev The credit system for Boba Turing\\n */\\ncontract BobaTuringCredit {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**********************\\n     * Contract Variables *\\n     **********************/\\n    address public owner;\\n\\n    mapping(address => uint256) public prepaidBalance;\\n\\n    address public turingToken;\\n    uint256 public turingPrice;\\n    uint256 public ownerRevenue;\\n\\n    /********************\\n     *      Events      *\\n     ********************/\\n\\n    event TransferOwnership(address oldOwner, address newOwner);\\n\\n    event AddBalanceTo(address sender, uint256 balanceAmount, address helperContractAddress);\\n\\n    event WithdrawRevenue(address sender, uint256 withdrawAmount);\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyNotInitialized() {\\n        require(address(turingToken) == address(0), \\\"Contract has been initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyInitialized() {\\n        require(address(turingToken) != address(0), \\\"Contract has not yet been initialized\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner || owner == address(0), \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /********************\\n     *    Constructor   *\\n     ********************/\\n\\n    constructor(uint256 _turingPrice) {\\n        turingPrice = _turingPrice;\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev Update turing token\\n     *\\n     * @param _turingToken credit token address\\n     */\\n    function updateTuringToken(address _turingToken) public onlyOwner onlyNotInitialized {\\n        turingToken = _turingToken;\\n    }\\n\\n    /**\\n     * @dev transfer ownership\\n     *\\n     * @param _newOwner new owner address\\n     */\\n    function transferOwnership(address _newOwner) public onlyOwner {\\n        require(_newOwner != address(0));\\n        owner = _newOwner;\\n        emit TransferOwnership(msg.sender, _newOwner);\\n    }\\n\\n    /**\\n     * @dev Update turing price\\n     *\\n     * @param _turingPrice turing price for each off-chain computation\\n     */\\n    function updateTuringPrice(uint256 _turingPrice) public onlyOwner {\\n        turingPrice = _turingPrice;\\n    }\\n\\n    /**\\n     * @dev Add credit for a Turing helper contract\\n     *\\n     * @param _addBalanceAmount the prepaid amount that the user want to add\\n     * @param _helperContractAddress the address of the turing helper contract\\n     */\\n    function addBalanceTo(uint256 _addBalanceAmount, address _helperContractAddress)\\n        public\\n        onlyInitialized\\n    {\\n        require(_addBalanceAmount != 0, \\\"Invalid amount\\\");\\n        require(Address.isContract(_helperContractAddress), \\\"Address is EOA\\\");\\n        require(\\n            ERC165Checker.supportsInterface(_helperContractAddress, 0x2f7adf43),\\n            \\\"Invalid Helper Contract\\\"\\n        );\\n\\n        prepaidBalance[_helperContractAddress] += _addBalanceAmount;\\n\\n        emit AddBalanceTo(msg.sender, _addBalanceAmount, _helperContractAddress);\\n\\n        // Transfer token to this contract\\n        IERC20(turingToken).safeTransferFrom(msg.sender, address(this), _addBalanceAmount);\\n    }\\n\\n    /**\\n     * @dev Return the credit of a specific helper contract\\n     */\\n    function getCreditAmount(address _helperContractAddress) public view returns (uint256) {\\n        require(turingPrice != 0, \\\"Unlimited credit\\\");\\n        return prepaidBalance[_helperContractAddress].div(turingPrice);\\n    }\\n\\n    /**\\n     * @dev Owner withdraws revenue\\n     *\\n     * @param _withdrawAmount the revenue amount that the owner wants to withdraw\\n     */\\n    function withdrawRevenue(uint256 _withdrawAmount) public onlyOwner onlyInitialized {\\n        require(_withdrawAmount <= ownerRevenue, \\\"Invalid Amount\\\");\\n\\n        ownerRevenue -= _withdrawAmount;\\n\\n        emit WithdrawRevenue(msg.sender, _withdrawAmount);\\n\\n        IERC20(turingToken).safeTransfer(owner, _withdrawAmount);\\n    }\\n}\",\"keccak256\":\"0xe018b8752189a77bcf0d269717f0d2542e44b3718d3f161e4541b10446f96932\",\"license\":\"MIT\"},\"contracts/ITuringHelper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\ninterface ITuringHelper {\\n\\n  /* Called from the external contract. It takes an api endponit URL\\n     and an abi-encoded request payload. The URL and the list of allowed\\n     methods are supplied when the contract is created. In the future\\n     some of this registration might be moved into l2geth, allowing for\\n     security measures such as TLS client certificates. A configurable timeout\\n     could also be added.\\n\\n     Logs the offchain response so that a future verifier or fraud prover\\n     can replay the transaction and ensure that it results in the same state\\n     root as during the initial execution. Note - a future version might\\n     need to include a timestamp and/or more details about the\\n     offchain interaction.\\n  */\\n  function TuringTx(string memory _url, bytes memory _payload) external returns (bytes memory);\\n}\",\"keccak256\":\"0xd85a6f46ce0dc3c97ddecd368e05134d8bee6e9034f08bbb19807ce81e4e761d\",\"license\":\"UNLICENSED\"},\"contracts/TuringHelper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport \\\"./ITuringHelper.sol\\\";\\n\\ncontract TuringHelper is ITuringHelper, Ownable {\\n\\n  TuringHelper Self;\\n\\n  // This protects your own credits for this helper contract\\n  mapping(address => bool) public permittedCaller;\\n\\n  event AddPermittedCaller(address _callerAddress);\\n  event RemovePermittedCaller(address _callerAddress);\\n  event CheckPermittedCaller(address _callerAddress, bool permitted);\\n  event OffchainResponse(uint version, bytes responseData);\\n  event OffchainRandom(uint version, uint256 random);\\n  event Offchain42(uint version, uint256 random);\\n\\n  modifier onlyPermittedCaller() {\\n    require(\\n      permittedCaller[msg.sender],\\n      'Invalid Caller Address'\\n    );\\n    _;\\n  }\\n\\n  constructor () public {\\n    Self = TuringHelper(address(this));\\n  }\\n\\n  function addPermittedCaller(address _callerAddress)\\n    public onlyOwner {\\n      permittedCaller[_callerAddress] = true;\\n      emit AddPermittedCaller(_callerAddress);\\n  }\\n\\n  function removePermittedCaller(address _callerAddress)\\n    public onlyOwner {\\n      permittedCaller[_callerAddress] = false;\\n      emit RemovePermittedCaller(_callerAddress);\\n  }\\n\\n  function checkPermittedCaller(address _callerAddress)\\n    public returns (bool) {\\n      bool permitted = permittedCaller[_callerAddress];\\n      emit CheckPermittedCaller(_callerAddress, permitted);\\n      return permitted;\\n  }\\n\\n  function GetErrorCode(uint32 rType)\\n    internal view returns (string memory) {\\n      if(rType ==  1) return \\\"TURING: Geth intercept failure\\\";\\n      if(rType == 10) return \\\"TURING: Incorrect input state\\\";\\n      if(rType == 11) return \\\"TURING: Calldata too short\\\";\\n      if(rType == 12) return \\\"TURING: URL >64 bytes\\\";\\n      if(rType == 13) return \\\"TURING: Server error\\\";\\n      if(rType == 14) return \\\"TURING: Could not decode server response\\\";\\n      if(rType == 15) return \\\"TURING: Could not create rpc client\\\";\\n      if(rType == 16) return \\\"TURING: RNG failure\\\";\\n      if(rType == 17) return \\\"TURING: API Response >322 chars\\\";\\n      if(rType == 18) return \\\"TURING: API Response >160 bytes\\\";\\n      if(rType == 19) return \\\"TURING: Insufficient credit\\\";\\n      if(rType == 20) return \\\"TURING: Missing cache entry\\\";\\n  }\\n\\n  /* This is the interface to the off-chain mechanism. Although\\n     marked as \\\"public\\\", it is only to be called by TuringCall()\\n     or TuringTX().\\n     The _payload parameter is overloaded to represent either the\\n     request parameters or the off-chain response, with the rType\\n     parameter indicating which is which.\\n     When called as a request (rType == 1), it starts the offchain call,\\n     which, if all all goes well, results in the rType changing to 2.\\n     This response is then passed back to the caller.\\n  */\\n  function GetResponse(uint32 rType, string memory _url, bytes memory _payload)\\n    public returns (bytes memory) {\\n\\n    require (msg.sender == address(this), \\\"Turing:GetResponse:msg.sender != address(this)\\\");\\n    require (_payload.length > 0, \\\"Turing:GetResponse:no payload\\\");\\n    require (rType == 2, string(GetErrorCode(rType))); // l2geth can pass values here to provide debug information\\n    return _payload;\\n  }\\n\\n  function GetRandom(uint32 rType, uint256 _random)\\n    public returns (uint256) {\\n\\n    require (msg.sender == address(this), \\\"Turing:GetResponse:msg.sender != address(this)\\\");\\n    require (rType == 2, string(GetErrorCode(rType)));\\n    return _random;\\n  }\\n\\n  function Get42(uint32 rType, uint256 _random)\\n    public returns (uint256) {\\n\\n    require (msg.sender == address(this), \\\"Turing:GetResponse:msg.sender != address(this)\\\");\\n    require (rType == 2, string(GetErrorCode(rType)));\\n    return _random;\\n  }\\n\\n  /* Called from the external contract. It takes an api endponit URL\\n     and an abi-encoded request payload. The URL and the list of allowed\\n     methods are supplied when the contract is created. In the future\\n     some of this registration might be moved into l2geth, allowing for\\n     security measures such as TLS client certificates. A configurable timeout\\n     could also be added.\\n\\n     Logs the offchain response so that a future verifier or fraud prover\\n     can replay the transaction and ensure that it results in the same state\\n     root as during the initial execution. Note - a future version might\\n     need to include a timestamp and/or more details about the\\n     offchain interaction.\\n  */\\n  function TuringTx(string memory _url, bytes memory _payload)\\n    public onlyPermittedCaller override returns (bytes memory) {\\n      require (_payload.length > 0, \\\"Turing:TuringTx:no payload\\\");\\n\\n      /* Initiate the request. This can't be a local function call\\n         because that would stay inside the EVM and not give l2geth\\n         a place to intercept and re-write the call.\\n      */\\n      bytes memory response = Self.GetResponse(1, _url, _payload);\\n      emit OffchainResponse(0x01, response);\\n      return response;\\n  }\\n\\n  function TuringRandom()\\n    public onlyPermittedCaller returns (uint256) {\\n\\n      uint256 response = Self.GetRandom(1, 0);\\n      emit OffchainRandom(0x01, response);\\n      return response;\\n  }\\n\\n  function Turing42()\\n    public onlyPermittedCaller returns (uint256) {\\n\\n      uint256 response = Self.Get42(2, 42);\\n      emit Offchain42(0x01, response);\\n      return response;\\n  }\\n\\n    // ERC165 check interface\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        bytes4 firstSupportedInterface = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\")); // ERC165\\n        bytes4 secondSupportedInterface = ITuringHelper.TuringTx.selector;\\n        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\\n    }\\n}\",\"keccak256\":\"0x25dc40a4ad5d4c68b1ae7e9de9b30267b79f81e03e39e98ee3833c9ecfe70d2c\",\"license\":\"UNLICENSED\"},\"contracts/TuringSubscriptionManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./TuringHelper.sol\\\";\\nimport \\\"./BobaTuringCredit.sol\\\";\\n\\ncontract TuringSubscriptionManager {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    BobaTuringCredit immutable public turingCredit;\\n\\n    uint256 public numSubscriptionCreated;\\n\\n    mapping(uint256=>TuringHelper) _subscription;\\n\\n    EnumerableSet.UintSet _activeSubscription;\\n    mapping(address=>EnumerableSet.UintSet) _ownedSubscription;\\n    mapping(uint256=>EnumerableSet.AddressSet) _subscriptionOwner;\\n    mapping(uint256=>EnumerableSet.AddressSet) _subscriptionPermittedCaller;\\n\\n    event SubscriptionCreated(uint256 subscriptionId, address user);\\n    event SubscriptionCanceled(uint256 subscriptionId, address user);\\n    event OwnerAdded(uint256 subscriptionId, address owner);\\n    event OwnerRemoved(uint256 subscriptionId, address owner);\\n    event PermitedCallerAdded(uint256 subscriptionId, address callder);\\n    event PermitedCallerRemoved(uint256 subscriptionId, address callder);\\n    event CreditAdded(uint256 subscriptionId, uint256 amount, address from);\\n\\n    constructor(\\n        BobaTuringCredit _turingCredit\\n    ) {\\n        turingCredit = _turingCredit;\\n    }\\n\\n    modifier onlySubscriptionOwner(uint256 subscriptionId) {\\n        require(_ownedSubscription[msg.sender].contains(subscriptionId), \\n            \\\"TuringSubscription: msg.sender is not the owner of the subscription.\\\");\\n        _;\\n    }\\n\\n    modifier onlyActiveSubscription(uint256 subscriptionId) {\\n        require(_activeSubscription.contains(subscriptionId), \\n            \\\"TuringSubscription: inactive subcription\\\");\\n        _;\\n    }\\n    \\n    function createSubscription() external returns (uint256 subscriptionId) {\\n        TuringHelper _helper = new TuringHelper();\\n        subscriptionId = numSubscriptionCreated;\\n        _subscription[subscriptionId] = _helper;\\n        _activeSubscription.add(subscriptionId);\\n\\n        _addSubscriptionOnwer(subscriptionId, msg.sender);\\n\\n        numSubscriptionCreated++;\\n\\n        emit SubscriptionCreated(subscriptionId, msg.sender);\\n    }\\n\\n    function cancelSubscriptionId(uint256 subscriptionId) \\n        onlySubscriptionOwner(subscriptionId) external {\\n        \\n        // Canceling subscription doesn't destruct the turing helper.\\n        // It transfers its ownership to msg.sender. \\n        _subscription[subscriptionId].transferOwnership(msg.sender);\\n\\n        delete _subscription[subscriptionId];\\n        _activeSubscription.remove(subscriptionId);\\n\\n        _removeSubscriptionOnwer(subscriptionId, msg.sender);\\n\\n        emit SubscriptionCanceled(subscriptionId, msg.sender);\\n    }\\n\\n    function addBalanceToSubscription(uint256 subscriptionId, uint256 _addBalanceAmount) \\n        external onlyActiveSubscription(subscriptionId) {\\n\\n        IERC20 turingToken = IERC20(turingCredit.turingToken());\\n        turingToken.safeTransferFrom(msg.sender, address(this), _addBalanceAmount);\\n        turingToken.approve(address(turingCredit), _addBalanceAmount);\\n\\n        turingCredit.addBalanceTo(\\n            _addBalanceAmount, \\n            address(_subscription[subscriptionId])\\n        );\\n        emit CreditAdded(subscriptionId, _addBalanceAmount, msg.sender);\\n    }\\n\\n    function addPermittedCaller(uint256 subscriptionId, address _callerAddress)\\n        onlySubscriptionOwner(subscriptionId) external {\\n\\n        _subscription[subscriptionId].addPermittedCaller(\\n            _callerAddress\\n        );\\n        _subscriptionPermittedCaller[subscriptionId].add(_callerAddress);\\n        emit PermitedCallerAdded(subscriptionId, _callerAddress);\\n    }\\n\\n    function _addSubscriptionOnwer(uint256 subscriptionId, address _owner)\\n        internal {\\n\\n        _ownedSubscription[_owner].add(subscriptionId);\\n        _subscriptionOwner[subscriptionId].add(_owner);\\n        emit OwnerAdded(subscriptionId, _owner);\\n    }\\n\\n    function _removeSubscriptionOnwer(uint256 subscriptionId, address _owner)\\n        internal {\\n\\n        _ownedSubscription[_owner].remove(subscriptionId);\\n        _subscriptionOwner[subscriptionId].remove(_owner);\\n        emit OwnerRemoved(subscriptionId, _owner);\\n    }\\n\\n    function addSubscriptionOnwer(uint256 subscriptionId, address _owner)\\n        onlySubscriptionOwner(subscriptionId) external {\\n\\n        _addSubscriptionOnwer(subscriptionId, _owner);\\n    }\\n\\n    function removeSubscriptionOnwer(uint256 subscriptionId, address _owner)\\n        onlySubscriptionOwner(subscriptionId) external {\\n\\n        _removeSubscriptionOnwer(subscriptionId, _owner);\\n    }\\n\\n    function removePermittedCaller(uint256 subscriptionId, address _callerAddress) \\n        onlySubscriptionOwner(subscriptionId) external {\\n\\n        _subscription[subscriptionId].removePermittedCaller(\\n            _callerAddress\\n        );\\n        _subscriptionPermittedCaller[subscriptionId].remove(_callerAddress);\\n        emit PermitedCallerRemoved(subscriptionId, _callerAddress);\\n    }\\n    \\n    /* View Functions */\\n\\n    function getSubscriptionTuringHelper(uint256 subscriptionId) \\n        public view onlyActiveSubscription(subscriptionId) returns (address) {\\n        \\n        return address(_subscription[subscriptionId]);\\n    }\\n\\n\\n    function getSubscriptionCreditAmount(uint256 subscriptionId) public view onlyActiveSubscription(subscriptionId) returns (uint256) {\\n        return turingCredit.getCreditAmount(address(_subscription[subscriptionId]));\\n    }\\n\\n    function checkPermittedCaller(uint256 subscriptionId, address _callerAddress) \\n        public view onlyActiveSubscription(subscriptionId) returns (bool) {\\n\\n        return _subscriptionPermittedCaller[subscriptionId].contains(_callerAddress);\\n    }\\n\\n    function activeSubscriptionCount() public view returns (uint256){\\n        return _activeSubscription.length();\\n    }\\n\\n    function activeSubscriptionByIndex(uint256 index) public view returns (uint256) {\\n        return _activeSubscription.at(index);\\n    }\\n\\n    function ownedSubscriptionCount(address owner) public view returns (uint256){\\n        return _ownedSubscription[owner].length();\\n    }\\n\\n    function ownedSubscriptionByIndex(address owner, uint256 index) public view returns (uint256) {\\n        return _ownedSubscription[owner].at(index);\\n    }\\n\\n    function subscriptionPermittedCallerByIndex(uint256 subscriptionId, uint256 index) \\n        public view onlyActiveSubscription(subscriptionId) returns (address) {\\n        \\n        return _subscriptionPermittedCaller[subscriptionId].at(index);\\n    }\\n\\n    function subscriptionPermittedCallerCount(uint256 subscriptionId) \\n        public view onlyActiveSubscription(subscriptionId) returns (uint256){\\n        \\n        return _subscriptionPermittedCaller[subscriptionId].length();\\n    }\\n\\n    function subscriptionOwnerByIndex(uint256 subscriptionId, uint256 index) \\n        public view onlyActiveSubscription(subscriptionId) returns (address) {\\n        \\n        return _subscriptionOwner[subscriptionId].at(index);\\n    }\\n\\n    function subscriptionOwnerCount(uint256 subscriptionId) \\n        public view onlyActiveSubscription(subscriptionId) returns (uint256){\\n        \\n        return _subscriptionOwner[subscriptionId].length();\\n    }\\n}\",\"keccak256\":\"0x0b0666b71dd474a1ad671fbe4f838ed564e648fc22517480c0e9b4a3f105f3f6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516126ed3803806126ed83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516126466100a76000396000818161016601528181610817015281816109bf01528181610a7c0152610b3e01526126466000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637f5014ef116100ad578063b5a2b66c11610071578063b5a2b66c1461027f578063e8cede6714610292578063f51e5387146102a5578063f72dd8d3146102b8578063f918024f146102cb57600080fd5b80637f5014ef1461023657806389975a4c146102495780638a8a1bfa1461025c578063a21a23e41461026f578063b16abdd41461027757600080fd5b80634d537d61116100f45780634d537d61146101c55780635263b09c146101d85780635b9d2cc2146101ed57806362eeab3d1461020057806373687cb61461022357600080fd5b8063098435d41461013157806316e54cb314610161578063239725ec146101885780632fcceac8146101a95780634395a9f6146101b2575b600080fd5b61014461013f3660046111a9565b6102de565b6040516001600160a01b0390911681526020015b60405180910390f35b6101447f000000000000000000000000000000000000000000000000000000000000000081565b61019b6101963660046111e3565b610331565b604051908152602001610158565b61019b60005481565b6101446101c0366004611200565b610358565b6101446101d33660046111a9565b61039f565b6101eb6101e6366004611200565b6103e1565b005b6101eb6101fb366004611219565b6104f1565b61021361020e366004611219565b6105f4565b6040519015158152602001610158565b61019b610231366004611200565b610636565b6101eb610244366004611219565b61067e565b6101eb610257366004611219565b610778565b61019b61026a366004611200565b6107be565b61019b610893565b61019b610953565b61019b61028d366004611249565b610964565b61019b6102a0366004611200565b610986565b6101eb6102b33660046111a9565b610993565b6101eb6102c6366004611219565b610be2565b61019b6102d9366004611200565b610c23565b6000826102ec600282610c64565b6103115760405162461bcd60e51b815260040161030890611275565b60405180910390fd5b60008481526006602052604090206103299084610c7c565b949350505050565b6001600160a01b038116600090815260046020526040812061035290610c88565b92915050565b600081610366600282610c64565b6103825760405162461bcd60e51b815260040161030890611275565b50506000908152600160205260409020546001600160a01b031690565b6000826103ad600282610c64565b6103c95760405162461bcd60e51b815260040161030890611275565b60008481526005602052604090206103299084610c7c565b33600090815260046020526040902081906103fc9082610c64565b6104185760405162461bcd60e51b8152600401610308906112bd565b6000828152600160205260409081902054905163f2fde38b60e01b81523360048201526001600160a01b039091169063f2fde38b90602401600060405180830381600087803b15801561046a57600080fd5b505af115801561047e573d6000803e3d6000fd5b505050600083815260016020526040902080546001600160a01b0319169055506104a9600283610c92565b506104b48233610c9e565b604080518381523360208201527f2043d2a8bc1d9bff79c046beecddb6becbd61f16f35ab1f173c92ebab285161491015b60405180910390a15050565b336000908152600460205260409020829061050c9082610c64565b6105285760405162461bcd60e51b8152600401610308906112bd565b6000838152600160205260409081902054905163aadebcb960e01b81526001600160a01b0384811660048301529091169063aadebcb990602401600060405180830381600087803b15801561057c57600080fd5b505af1158015610590573d6000803e3d6000fd5b50505060008481526006602052604090206105ac915083610d18565b50604080518481526001600160a01b03841660208201527fef3ee9243fc9277aefc8bceeb816baa7c577c6612f2489a67d2fd10aaad2f53991015b60405180910390a1505050565b600082610602600282610c64565b61061e5760405162461bcd60e51b815260040161030890611275565b60008481526006602052604090206103299084610d2d565b600081610644600282610c64565b6106605760405162461bcd60e51b815260040161030890611275565b600083815260066020526040902061067790610c88565b9392505050565b33600090815260046020526040902082906106999082610c64565b6106b55760405162461bcd60e51b8152600401610308906112bd565b6000838152600160205260409081902054905163a432ee2760e01b81526001600160a01b0384811660048301529091169063a432ee2790602401600060405180830381600087803b15801561070957600080fd5b505af115801561071d573d6000803e3d6000fd5b5050506000848152600660205260409020610739915083610d4f565b50604080518481526001600160a01b03841660208201527fdab382f3e13cc260e2577b99019e313fe8026747cd0c1fbca340f0316a4d4e9a91016105e7565b33600090815260046020526040902082906107939082610c64565b6107af5760405162461bcd60e51b8152600401610308906112bd565b6107b98383610d64565b505050565b6000816107cc600282610c64565b6107e85760405162461bcd60e51b815260040161030890611275565b6000838152600160205260409081902054905163a52b962d60e01b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063a52b962d9060240160206040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190611327565b6000806040516108a29061119c565b604051809103906000f0801580156108be573d6000803e3d6000fd5b50600080548082526001602052604090912080546001600160a01b0319166001600160a01b038416179055925090506108f8600283610dde565b506109038233610d64565b60008054908061091283611356565b9091555050604080518381523360208201527f1d3015d7ba850fa198dc7b1a3f5d42779313a681035f77c8c03764c61005518d910160405180910390a15090565b600061095f6002610c88565b905090565b6001600160a01b03821660009081526004602052604081206106779083610c7c565b6000610352600283610c7c565b8161099f600282610c64565b6109bb5760405162461bcd60e51b815260040161030890611275565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663853383926040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190611371565b9050610a656001600160a01b038216333086610dea565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820185905282169063095ea7b390604401602060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061138e565b5060008481526001602052604090819020549051631fb1244f60e31b8152600481018590526001600160a01b0391821660248201527f00000000000000000000000000000000000000000000000000000000000000009091169063fd89227890604401600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b50506040805187815260208101879052338183015290517f3ea1799d014b4e00a081ffd3ae4fea96220ca86ca51c52cea240ec128c08c88d9350908190036060019150a150505050565b3360009081526004602052604090208290610bfd9082610c64565b610c195760405162461bcd60e51b8152600401610308906112bd565b6107b98383610c9e565b600081610c31600282610c64565b610c4d5760405162461bcd60e51b815260040161030890611275565b600083815260056020526040902061067790610c88565b60008181526001830160205260408120541515610677565b60006106778383610e4a565b6000610352825490565b60006106778383610e74565b6001600160a01b0381166000908152600460205260409020610cc09083610c92565b506000828152600560205260409020610cd99082610d18565b50604080518381526001600160a01b03831660208201527f2d2f043cb8f93c6464e5ce5b93e72c2863eeb044241ea316d2a5a9af9320712191016104e5565b6000610677836001600160a01b038416610e74565b6001600160a01b03811660009081526001830160205260408120541515610677565b6000610677836001600160a01b038416610f67565b6001600160a01b0381166000908152600460205260409020610d869083610dde565b506000828152600560205260409020610d9f9082610d4f565b50604080518381526001600160a01b03831660208201527fab7a51f59a55e3b65bbabf99457f8955ff12366d20e368988c35d2eab9bd8df991016104e5565b60006106778383610f67565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e44908590610fb6565b50505050565b6000826000018281548110610e6157610e616113b0565b9060005260206000200154905092915050565b60008181526001830160205260408120548015610f5d576000610e986001836113c6565b8554909150600090610eac906001906113c6565b9050818114610f11576000866000018281548110610ecc57610ecc6113b0565b9060005260206000200154905080876000018481548110610eef57610eef6113b0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610f2257610f226113dd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610352565b6000915050610352565b6000818152600183016020526040812054610fae57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610352565b506000610352565b600061100b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110889092919063ffffffff16565b8051909150156107b95780806020019051810190611029919061138e565b6107b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610308565b60606103298484600085856001600160a01b0385163b6110ea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610308565b600080866001600160a01b03168587604051611106919061141f565b60006040518083038185875af1925050503d8060008114611143576040519150601f19603f3d011682016040523d82523d6000602084013e611148565b606091505b5091509150611158828286611163565b979650505050505050565b60608315611172575081610677565b8251156111825782518084602001fd5b8160405162461bcd60e51b8152600401610308919061143b565b6111a28061146f83390190565b600080604083850312156111bc57600080fd5b50508035926020909101359150565b6001600160a01b03811681146111e057600080fd5b50565b6000602082840312156111f557600080fd5b8135610677816111cb565b60006020828403121561121257600080fd5b5035919050565b6000806040838503121561122c57600080fd5b82359150602083013561123e816111cb565b809150509250929050565b6000806040838503121561125c57600080fd5b8235611267816111cb565b946020939093013593505050565b60208082526028908201527f547572696e67537562736372697074696f6e3a20696e6163746976652073756260408201526731b934b83a34b7b760c11b606082015260800190565b60208082526044908201527f547572696e67537562736372697074696f6e3a206d73672e73656e646572206960408201527f73206e6f7420746865206f776e6572206f66207468652073756273637269707460608201526334b7b71760e11b608082015260a00190565b60006020828403121561133957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561136a5761136a611340565b5060010190565b60006020828403121561138357600080fd5b8151610677816111cb565b6000602082840312156113a057600080fd5b8151801515811461067757600080fd5b634e487b7160e01b600052603260045260246000fd5b6000828210156113d8576113d8611340565b500390565b634e487b7160e01b600052603160045260246000fd5b60005b8381101561140e5781810151838201526020016113f6565b83811115610e445750506000910152565b600082516114318184602087016113f3565b9190910192915050565b602081526000825180602084015261145a8160408501602087016113f3565b601f01601f1916919091016040019291505056fe608060405234801561001057600080fd5b5061001a33610031565b600180546001600160a01b03191630179055610081565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611112806100906000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a432ee271161008c578063cbcd0c2c11610066578063cbcd0c2c146101c6578063e86f18991461014d578063f2f3fa07146101d9578063f2fde38b146101fc57600080fd5b8063a432ee2714610198578063aadebcb9146101ab578063b8d16056146101be57600080fd5b8063493d57d6116100c8578063493d57d61461014d578063715018a6146101605780637d93616c1461016a5780638da5cb5b1461017d57600080fd5b806301ffc9a7146100ef5780632f7adf431461011757806345ff812a14610137575b600080fd5b6101026100fd366004610c56565b61020f565b60405190151581526020015b60405180910390f35b61012a610125366004610d4c565b61026d565b60405161010e9190610e0c565b61013f6103c9565b60405190815260200161010e565b61013f61015b366004610e33565b6104c5565b61016861051f565b005b61012a610178366004610e5d565b610555565b6000546040516001600160a01b03909116815260200161010e565b6101686101a6366004610ed1565b610601565b6101686101b9366004610ed1565b610686565b61013f610701565b6101026101d4366004610ed1565b6107f0565b6101026101e7366004610ed1565b60026020526000908152604090205460ff1681565b61016861020a366004610ed1565b610853565b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2632f7adf4360e01b6001600160e01b031984166301ffc9a760e01b148061026557506001600160e01b0319848116908216145b949350505050565b3360009081526002602052604090205460609060ff166102a85760405162461bcd60e51b815260040161029f90610efa565b60405180910390fd5b60008251116102f95760405162461bcd60e51b815260206004820152601a60248201527f547572696e673a547572696e6754783a6e6f207061796c6f6164000000000000604482015260640161029f565b60018054604051631f64d85b60e21b81526000926001600160a01b0390921691637d93616c91610330919088908890600401610f2a565b600060405180830381600087803b15801561034a57600080fd5b505af115801561035e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103869190810190610f65565b90507ffde6d9b9b674fe8a495a825379378eb214e03439d12f342ac5e8af9768c1d85c6001826040516103ba929190610fdc565b60405180910390a19392505050565b3360009081526002602052604081205460ff166103f85760405162461bcd60e51b815260040161029f90610efa565b6001805460405163249eabeb60e11b81526004810192909252600060248301819052916001600160a01b039091169063493d57d690604401602060405180830381600087803b15801561044a57600080fd5b505af115801561045e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104829190610ff5565b6040805160018152602081018390529192507f450d62889c3a6e19c9586840ce9c21040b90d81950fe31f2ba982090adaf53e891015b60405180910390a1905090565b60003330146104e65760405162461bcd60e51b815260040161029f9061100e565b8263ffffffff166002146104f9846108ee565b906105175760405162461bcd60e51b815260040161029f9190610e0c565b509092915050565b6000546001600160a01b031633146105495760405162461bcd60e51b815260040161029f9061105c565b6105536000610c06565b565b60603330146105765760405162461bcd60e51b815260040161029f9061100e565b60008251116105c75760405162461bcd60e51b815260206004820152601d60248201527f547572696e673a476574526573706f6e73653a6e6f207061796c6f6164000000604482015260640161029f565b8363ffffffff166002146105da856108ee565b906105f85760405162461bcd60e51b815260040161029f9190610e0c565b50909392505050565b6000546001600160a01b0316331461062b5760405162461bcd60e51b815260040161029f9061105c565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f9ce84a7ab8065f5f6f23c19be05400b2edbabf71e4b29837f56a016c951b97d291015b60405180910390a150565b6000546001600160a01b031633146106b05760405162461bcd60e51b815260040161029f9061105c565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527feacddceebef9fdf16961c5dba55871a098bd93be9160335139bdeb226537c6ed910161067b565b3360009081526002602052604081205460ff166107305760405162461bcd60e51b815260040161029f90610efa565b60015460405163e86f189960e01b815260026004820152602a60248201526000916001600160a01b03169063e86f189990604401602060405180830381600087803b15801561077e57600080fd5b505af1158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190610ff5565b6040805160018152602081018390529192507fcf56007112ef7f986f258f82114b449a536da425cefac3982f64e306b07c792191016104b8565b6001600160a01b038116600081815260026020908152604080832054815194855260ff1680151592850192909252919290917fabf082f4a354a0ea137bf1c9b0f6660d1340b3f84e293fb4a4cb01c7602c3962910160405180910390a192915050565b6000546001600160a01b0316331461087d5760405162461bcd60e51b815260040161029f9061105c565b6001600160a01b0381166108e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029f565b6108eb81610c06565b50565b60608163ffffffff166001141561093857505060408051808201909152601e81527f545552494e473a204765746820696e74657263657074206661696c7572650000602082015290565b8163ffffffff16600a141561098057505060408051808201909152601d81527f545552494e473a20496e636f727265637420696e707574207374617465000000602082015290565b8163ffffffff16600b14156109c857505060408051808201909152601a81527f545552494e473a2043616c6c6461746120746f6f2073686f7274000000000000602082015290565b8163ffffffff16600c1415610a08575050604080518082019091526015815274545552494e473a2055524c203e363420627974657360581b602082015290565b8163ffffffff16600d1415610a475750506040805180820190915260148152732a2aa924a7239d1029b2b93b32b91032b93937b960611b602082015290565b8163ffffffff16600e1415610a75576040518060600160405280602881526020016110926028913992915050565b8163ffffffff16600f1415610aa3576040518060600160405280602381526020016110ba6023913992915050565b8163ffffffff1660101415610ae1575050604080518082019091526013815272545552494e473a20524e47206661696c75726560681b602082015290565b8163ffffffff1660111415610b2957505060408051808201909152601f81527f545552494e473a2041504920526573706f6e7365203e33323220636861727300602082015290565b8163ffffffff1660121415610b7157505060408051808201909152601f81527f545552494e473a2041504920526573706f6e7365203e31363020627974657300602082015290565b8163ffffffff1660131415610bb957505060408051808201909152601b81527f545552494e473a20496e73756666696369656e74206372656469740000000000602082015290565b8163ffffffff1660141415610c0157505060408051808201909152601b81527f545552494e473a204d697373696e6720636163686520656e7472790000000000602082015290565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610c6857600080fd5b81356001600160e01b031981168114610c8057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc657610cc6610c87565b604052919050565b600067ffffffffffffffff821115610ce857610ce8610c87565b50601f01601f191660200190565b600082601f830112610d0757600080fd5b8135610d1a610d1582610cce565b610c9d565b818152846020838601011115610d2f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610d5f57600080fd5b823567ffffffffffffffff80821115610d7757600080fd5b610d8386838701610cf6565b93506020850135915080821115610d9957600080fd5b50610da685828601610cf6565b9150509250929050565b60005b83811015610dcb578181015183820152602001610db3565b83811115610dda576000848401525b50505050565b60008151808452610df8816020860160208601610db0565b601f01601f19169290920160200192915050565b602081526000610c806020830184610de0565b803563ffffffff81168114610c0157600080fd5b60008060408385031215610e4657600080fd5b610e4f83610e1f565b946020939093013593505050565b600080600060608486031215610e7257600080fd5b610e7b84610e1f565b9250602084013567ffffffffffffffff80821115610e9857600080fd5b610ea487838801610cf6565b93506040860135915080821115610eba57600080fd5b50610ec786828701610cf6565b9150509250925092565b600060208284031215610ee357600080fd5b81356001600160a01b0381168114610c8057600080fd5b602080825260169082015275496e76616c69642043616c6c6572204164647265737360501b604082015260600190565b63ffffffff84168152606060208201526000610f496060830185610de0565b8281036040840152610f5b8185610de0565b9695505050505050565b600060208284031215610f7757600080fd5b815167ffffffffffffffff811115610f8e57600080fd5b8201601f81018413610f9f57600080fd5b8051610fad610d1582610cce565b818152856020838501011115610fc257600080fd5b610fd3826020830160208601610db0565b95945050505050565b8281526040602082015260006102656040830184610de0565b60006020828403121561100757600080fd5b5051919050565b6020808252602e908201527f547572696e673a476574526573706f6e73653a6d73672e73656e64657220213d60408201526d206164647265737328746869732960901b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe545552494e473a20436f756c64206e6f74206465636f64652073657276657220726573706f6e7365545552494e473a20436f756c64206e6f74206372656174652072706320636c69656e74a2646970667358221220b491a9d9d86d717888f32582faab0b6ffcf3a82cccefea41d1a41524ca43be0864736f6c63430008090033a2646970667358221220c07f099291c9b5d33c941f954d2d67203c8373f69c54614cc7faa58393a7be4d64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80637f5014ef116100ad578063b5a2b66c11610071578063b5a2b66c1461027f578063e8cede6714610292578063f51e5387146102a5578063f72dd8d3146102b8578063f918024f146102cb57600080fd5b80637f5014ef1461023657806389975a4c146102495780638a8a1bfa1461025c578063a21a23e41461026f578063b16abdd41461027757600080fd5b80634d537d61116100f45780634d537d61146101c55780635263b09c146101d85780635b9d2cc2146101ed57806362eeab3d1461020057806373687cb61461022357600080fd5b8063098435d41461013157806316e54cb314610161578063239725ec146101885780632fcceac8146101a95780634395a9f6146101b2575b600080fd5b61014461013f3660046111a9565b6102de565b6040516001600160a01b0390911681526020015b60405180910390f35b6101447f000000000000000000000000000000000000000000000000000000000000000081565b61019b6101963660046111e3565b610331565b604051908152602001610158565b61019b60005481565b6101446101c0366004611200565b610358565b6101446101d33660046111a9565b61039f565b6101eb6101e6366004611200565b6103e1565b005b6101eb6101fb366004611219565b6104f1565b61021361020e366004611219565b6105f4565b6040519015158152602001610158565b61019b610231366004611200565b610636565b6101eb610244366004611219565b61067e565b6101eb610257366004611219565b610778565b61019b61026a366004611200565b6107be565b61019b610893565b61019b610953565b61019b61028d366004611249565b610964565b61019b6102a0366004611200565b610986565b6101eb6102b33660046111a9565b610993565b6101eb6102c6366004611219565b610be2565b61019b6102d9366004611200565b610c23565b6000826102ec600282610c64565b6103115760405162461bcd60e51b815260040161030890611275565b60405180910390fd5b60008481526006602052604090206103299084610c7c565b949350505050565b6001600160a01b038116600090815260046020526040812061035290610c88565b92915050565b600081610366600282610c64565b6103825760405162461bcd60e51b815260040161030890611275565b50506000908152600160205260409020546001600160a01b031690565b6000826103ad600282610c64565b6103c95760405162461bcd60e51b815260040161030890611275565b60008481526005602052604090206103299084610c7c565b33600090815260046020526040902081906103fc9082610c64565b6104185760405162461bcd60e51b8152600401610308906112bd565b6000828152600160205260409081902054905163f2fde38b60e01b81523360048201526001600160a01b039091169063f2fde38b90602401600060405180830381600087803b15801561046a57600080fd5b505af115801561047e573d6000803e3d6000fd5b505050600083815260016020526040902080546001600160a01b0319169055506104a9600283610c92565b506104b48233610c9e565b604080518381523360208201527f2043d2a8bc1d9bff79c046beecddb6becbd61f16f35ab1f173c92ebab285161491015b60405180910390a15050565b336000908152600460205260409020829061050c9082610c64565b6105285760405162461bcd60e51b8152600401610308906112bd565b6000838152600160205260409081902054905163aadebcb960e01b81526001600160a01b0384811660048301529091169063aadebcb990602401600060405180830381600087803b15801561057c57600080fd5b505af1158015610590573d6000803e3d6000fd5b50505060008481526006602052604090206105ac915083610d18565b50604080518481526001600160a01b03841660208201527fef3ee9243fc9277aefc8bceeb816baa7c577c6612f2489a67d2fd10aaad2f53991015b60405180910390a1505050565b600082610602600282610c64565b61061e5760405162461bcd60e51b815260040161030890611275565b60008481526006602052604090206103299084610d2d565b600081610644600282610c64565b6106605760405162461bcd60e51b815260040161030890611275565b600083815260066020526040902061067790610c88565b9392505050565b33600090815260046020526040902082906106999082610c64565b6106b55760405162461bcd60e51b8152600401610308906112bd565b6000838152600160205260409081902054905163a432ee2760e01b81526001600160a01b0384811660048301529091169063a432ee2790602401600060405180830381600087803b15801561070957600080fd5b505af115801561071d573d6000803e3d6000fd5b5050506000848152600660205260409020610739915083610d4f565b50604080518481526001600160a01b03841660208201527fdab382f3e13cc260e2577b99019e313fe8026747cd0c1fbca340f0316a4d4e9a91016105e7565b33600090815260046020526040902082906107939082610c64565b6107af5760405162461bcd60e51b8152600401610308906112bd565b6107b98383610d64565b505050565b6000816107cc600282610c64565b6107e85760405162461bcd60e51b815260040161030890611275565b6000838152600160205260409081902054905163a52b962d60e01b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063a52b962d9060240160206040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106779190611327565b6000806040516108a29061119c565b604051809103906000f0801580156108be573d6000803e3d6000fd5b50600080548082526001602052604090912080546001600160a01b0319166001600160a01b038416179055925090506108f8600283610dde565b506109038233610d64565b60008054908061091283611356565b9091555050604080518381523360208201527f1d3015d7ba850fa198dc7b1a3f5d42779313a681035f77c8c03764c61005518d910160405180910390a15090565b600061095f6002610c88565b905090565b6001600160a01b03821660009081526004602052604081206106779083610c7c565b6000610352600283610c7c565b8161099f600282610c64565b6109bb5760405162461bcd60e51b815260040161030890611275565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663853383926040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e9190611371565b9050610a656001600160a01b038216333086610dea565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820185905282169063095ea7b390604401602060405180830381600087803b158015610acf57600080fd5b505af1158015610ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b07919061138e565b5060008481526001602052604090819020549051631fb1244f60e31b8152600481018590526001600160a01b0391821660248201527f00000000000000000000000000000000000000000000000000000000000000009091169063fd89227890604401600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b50506040805187815260208101879052338183015290517f3ea1799d014b4e00a081ffd3ae4fea96220ca86ca51c52cea240ec128c08c88d9350908190036060019150a150505050565b3360009081526004602052604090208290610bfd9082610c64565b610c195760405162461bcd60e51b8152600401610308906112bd565b6107b98383610c9e565b600081610c31600282610c64565b610c4d5760405162461bcd60e51b815260040161030890611275565b600083815260056020526040902061067790610c88565b60008181526001830160205260408120541515610677565b60006106778383610e4a565b6000610352825490565b60006106778383610e74565b6001600160a01b0381166000908152600460205260409020610cc09083610c92565b506000828152600560205260409020610cd99082610d18565b50604080518381526001600160a01b03831660208201527f2d2f043cb8f93c6464e5ce5b93e72c2863eeb044241ea316d2a5a9af9320712191016104e5565b6000610677836001600160a01b038416610e74565b6001600160a01b03811660009081526001830160205260408120541515610677565b6000610677836001600160a01b038416610f67565b6001600160a01b0381166000908152600460205260409020610d869083610dde565b506000828152600560205260409020610d9f9082610d4f565b50604080518381526001600160a01b03831660208201527fab7a51f59a55e3b65bbabf99457f8955ff12366d20e368988c35d2eab9bd8df991016104e5565b60006106778383610f67565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610e44908590610fb6565b50505050565b6000826000018281548110610e6157610e616113b0565b9060005260206000200154905092915050565b60008181526001830160205260408120548015610f5d576000610e986001836113c6565b8554909150600090610eac906001906113c6565b9050818114610f11576000866000018281548110610ecc57610ecc6113b0565b9060005260206000200154905080876000018481548110610eef57610eef6113b0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610f2257610f226113dd565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610352565b6000915050610352565b6000818152600183016020526040812054610fae57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610352565b506000610352565b600061100b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110889092919063ffffffff16565b8051909150156107b95780806020019051810190611029919061138e565b6107b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610308565b60606103298484600085856001600160a01b0385163b6110ea5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610308565b600080866001600160a01b03168587604051611106919061141f565b60006040518083038185875af1925050503d8060008114611143576040519150601f19603f3d011682016040523d82523d6000602084013e611148565b606091505b5091509150611158828286611163565b979650505050505050565b60608315611172575081610677565b8251156111825782518084602001fd5b8160405162461bcd60e51b8152600401610308919061143b565b6111a28061146f83390190565b600080604083850312156111bc57600080fd5b50508035926020909101359150565b6001600160a01b03811681146111e057600080fd5b50565b6000602082840312156111f557600080fd5b8135610677816111cb565b60006020828403121561121257600080fd5b5035919050565b6000806040838503121561122c57600080fd5b82359150602083013561123e816111cb565b809150509250929050565b6000806040838503121561125c57600080fd5b8235611267816111cb565b946020939093013593505050565b60208082526028908201527f547572696e67537562736372697074696f6e3a20696e6163746976652073756260408201526731b934b83a34b7b760c11b606082015260800190565b60208082526044908201527f547572696e67537562736372697074696f6e3a206d73672e73656e646572206960408201527f73206e6f7420746865206f776e6572206f66207468652073756273637269707460608201526334b7b71760e11b608082015260a00190565b60006020828403121561133957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561136a5761136a611340565b5060010190565b60006020828403121561138357600080fd5b8151610677816111cb565b6000602082840312156113a057600080fd5b8151801515811461067757600080fd5b634e487b7160e01b600052603260045260246000fd5b6000828210156113d8576113d8611340565b500390565b634e487b7160e01b600052603160045260246000fd5b60005b8381101561140e5781810151838201526020016113f6565b83811115610e445750506000910152565b600082516114318184602087016113f3565b9190910192915050565b602081526000825180602084015261145a8160408501602087016113f3565b601f01601f1916919091016040019291505056fe608060405234801561001057600080fd5b5061001a33610031565b600180546001600160a01b03191630179055610081565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611112806100906000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a432ee271161008c578063cbcd0c2c11610066578063cbcd0c2c146101c6578063e86f18991461014d578063f2f3fa07146101d9578063f2fde38b146101fc57600080fd5b8063a432ee2714610198578063aadebcb9146101ab578063b8d16056146101be57600080fd5b8063493d57d6116100c8578063493d57d61461014d578063715018a6146101605780637d93616c1461016a5780638da5cb5b1461017d57600080fd5b806301ffc9a7146100ef5780632f7adf431461011757806345ff812a14610137575b600080fd5b6101026100fd366004610c56565b61020f565b60405190151581526020015b60405180910390f35b61012a610125366004610d4c565b61026d565b60405161010e9190610e0c565b61013f6103c9565b60405190815260200161010e565b61013f61015b366004610e33565b6104c5565b61016861051f565b005b61012a610178366004610e5d565b610555565b6000546040516001600160a01b03909116815260200161010e565b6101686101a6366004610ed1565b610601565b6101686101b9366004610ed1565b610686565b61013f610701565b6101026101d4366004610ed1565b6107f0565b6101026101e7366004610ed1565b60026020526000908152604090205460ff1681565b61016861020a366004610ed1565b610853565b60007f01ffc9a7a5cef8baa21ed3c5c0d7e23accb804b619e9333b597f47a0d84076e2632f7adf4360e01b6001600160e01b031984166301ffc9a760e01b148061026557506001600160e01b0319848116908216145b949350505050565b3360009081526002602052604090205460609060ff166102a85760405162461bcd60e51b815260040161029f90610efa565b60405180910390fd5b60008251116102f95760405162461bcd60e51b815260206004820152601a60248201527f547572696e673a547572696e6754783a6e6f207061796c6f6164000000000000604482015260640161029f565b60018054604051631f64d85b60e21b81526000926001600160a01b0390921691637d93616c91610330919088908890600401610f2a565b600060405180830381600087803b15801561034a57600080fd5b505af115801561035e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103869190810190610f65565b90507ffde6d9b9b674fe8a495a825379378eb214e03439d12f342ac5e8af9768c1d85c6001826040516103ba929190610fdc565b60405180910390a19392505050565b3360009081526002602052604081205460ff166103f85760405162461bcd60e51b815260040161029f90610efa565b6001805460405163249eabeb60e11b81526004810192909252600060248301819052916001600160a01b039091169063493d57d690604401602060405180830381600087803b15801561044a57600080fd5b505af115801561045e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104829190610ff5565b6040805160018152602081018390529192507f450d62889c3a6e19c9586840ce9c21040b90d81950fe31f2ba982090adaf53e891015b60405180910390a1905090565b60003330146104e65760405162461bcd60e51b815260040161029f9061100e565b8263ffffffff166002146104f9846108ee565b906105175760405162461bcd60e51b815260040161029f9190610e0c565b509092915050565b6000546001600160a01b031633146105495760405162461bcd60e51b815260040161029f9061105c565b6105536000610c06565b565b60603330146105765760405162461bcd60e51b815260040161029f9061100e565b60008251116105c75760405162461bcd60e51b815260206004820152601d60248201527f547572696e673a476574526573706f6e73653a6e6f207061796c6f6164000000604482015260640161029f565b8363ffffffff166002146105da856108ee565b906105f85760405162461bcd60e51b815260040161029f9190610e0c565b50909392505050565b6000546001600160a01b0316331461062b5760405162461bcd60e51b815260040161029f9061105c565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f9ce84a7ab8065f5f6f23c19be05400b2edbabf71e4b29837f56a016c951b97d291015b60405180910390a150565b6000546001600160a01b031633146106b05760405162461bcd60e51b815260040161029f9061105c565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527feacddceebef9fdf16961c5dba55871a098bd93be9160335139bdeb226537c6ed910161067b565b3360009081526002602052604081205460ff166107305760405162461bcd60e51b815260040161029f90610efa565b60015460405163e86f189960e01b815260026004820152602a60248201526000916001600160a01b03169063e86f189990604401602060405180830381600087803b15801561077e57600080fd5b505af1158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190610ff5565b6040805160018152602081018390529192507fcf56007112ef7f986f258f82114b449a536da425cefac3982f64e306b07c792191016104b8565b6001600160a01b038116600081815260026020908152604080832054815194855260ff1680151592850192909252919290917fabf082f4a354a0ea137bf1c9b0f6660d1340b3f84e293fb4a4cb01c7602c3962910160405180910390a192915050565b6000546001600160a01b0316331461087d5760405162461bcd60e51b815260040161029f9061105c565b6001600160a01b0381166108e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029f565b6108eb81610c06565b50565b60608163ffffffff166001141561093857505060408051808201909152601e81527f545552494e473a204765746820696e74657263657074206661696c7572650000602082015290565b8163ffffffff16600a141561098057505060408051808201909152601d81527f545552494e473a20496e636f727265637420696e707574207374617465000000602082015290565b8163ffffffff16600b14156109c857505060408051808201909152601a81527f545552494e473a2043616c6c6461746120746f6f2073686f7274000000000000602082015290565b8163ffffffff16600c1415610a08575050604080518082019091526015815274545552494e473a2055524c203e363420627974657360581b602082015290565b8163ffffffff16600d1415610a475750506040805180820190915260148152732a2aa924a7239d1029b2b93b32b91032b93937b960611b602082015290565b8163ffffffff16600e1415610a75576040518060600160405280602881526020016110926028913992915050565b8163ffffffff16600f1415610aa3576040518060600160405280602381526020016110ba6023913992915050565b8163ffffffff1660101415610ae1575050604080518082019091526013815272545552494e473a20524e47206661696c75726560681b602082015290565b8163ffffffff1660111415610b2957505060408051808201909152601f81527f545552494e473a2041504920526573706f6e7365203e33323220636861727300602082015290565b8163ffffffff1660121415610b7157505060408051808201909152601f81527f545552494e473a2041504920526573706f6e7365203e31363020627974657300602082015290565b8163ffffffff1660131415610bb957505060408051808201909152601b81527f545552494e473a20496e73756666696369656e74206372656469740000000000602082015290565b8163ffffffff1660141415610c0157505060408051808201909152601b81527f545552494e473a204d697373696e6720636163686520656e7472790000000000602082015290565b919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610c6857600080fd5b81356001600160e01b031981168114610c8057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc657610cc6610c87565b604052919050565b600067ffffffffffffffff821115610ce857610ce8610c87565b50601f01601f191660200190565b600082601f830112610d0757600080fd5b8135610d1a610d1582610cce565b610c9d565b818152846020838601011115610d2f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610d5f57600080fd5b823567ffffffffffffffff80821115610d7757600080fd5b610d8386838701610cf6565b93506020850135915080821115610d9957600080fd5b50610da685828601610cf6565b9150509250929050565b60005b83811015610dcb578181015183820152602001610db3565b83811115610dda576000848401525b50505050565b60008151808452610df8816020860160208601610db0565b601f01601f19169290920160200192915050565b602081526000610c806020830184610de0565b803563ffffffff81168114610c0157600080fd5b60008060408385031215610e4657600080fd5b610e4f83610e1f565b946020939093013593505050565b600080600060608486031215610e7257600080fd5b610e7b84610e1f565b9250602084013567ffffffffffffffff80821115610e9857600080fd5b610ea487838801610cf6565b93506040860135915080821115610eba57600080fd5b50610ec786828701610cf6565b9150509250925092565b600060208284031215610ee357600080fd5b81356001600160a01b0381168114610c8057600080fd5b602080825260169082015275496e76616c69642043616c6c6572204164647265737360501b604082015260600190565b63ffffffff84168152606060208201526000610f496060830185610de0565b8281036040840152610f5b8185610de0565b9695505050505050565b600060208284031215610f7757600080fd5b815167ffffffffffffffff811115610f8e57600080fd5b8201601f81018413610f9f57600080fd5b8051610fad610d1582610cce565b818152856020838501011115610fc257600080fd5b610fd3826020830160208601610db0565b95945050505050565b8281526040602082015260006102656040830184610de0565b60006020828403121561100757600080fd5b5051919050565b6020808252602e908201527f547572696e673a476574526573706f6e73653a6d73672e73656e64657220213d60408201526d206164647265737328746869732960901b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe545552494e473a20436f756c64206e6f74206465636f64652073657276657220726573706f6e7365545552494e473a20436f756c64206e6f74206372656174652072706320636c69656e74a2646970667358221220b491a9d9d86d717888f32582faab0b6ffcf3a82cccefea41d1a41524ca43be0864736f6c63430008090033a2646970667358221220c07f099291c9b5d33c941f954d2d67203c8373f69c54614cc7faa58393a7be4d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2608,
        "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
        "label": "numSubscriptionCreated",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2613,
        "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
        "label": "_subscription",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(TuringHelper)2585)"
      },
      {
        "astId": 2616,
        "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
        "label": "_activeSubscription",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintSet)1718_storage"
      },
      {
        "astId": 2621,
        "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
        "label": "_ownedSubscription",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UintSet)1718_storage)"
      },
      {
        "astId": 2626,
        "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
        "label": "_subscriptionOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)1561_storage)"
      },
      {
        "astId": 2631,
        "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
        "label": "_subscriptionPermittedCaller",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)1561_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TuringHelper)2585": {
        "encoding": "inplace",
        "label": "contract TuringHelper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)1718_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)1718_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_contract(TuringHelper)2585)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract TuringHelper)",
        "numberOfBytes": "32",
        "value": "t_contract(TuringHelper)2585"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)1561_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1561_storage"
      },
      "t_struct(AddressSet)1561_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1560,
            "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1260_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1260_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1255,
            "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1259,
            "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)1718_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 1717,
            "contract": "contracts/TuringSubscriptionManager.sol:TuringSubscriptionManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1260_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}